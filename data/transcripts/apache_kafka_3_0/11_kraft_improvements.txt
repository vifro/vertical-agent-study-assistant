Apache Kafka’s design centers on a high-performance, log‐structured architecture that optimizes disk buffering, CPU caching, and data transfer. While the commit log is critical, much of Kafka’s code handles partition management, leadership allocation, and failure recovery—tasks that were traditionally managed using Apache ZooKeeper. This dual-system approach introduced complexity by requiring operators to handle two separate log implementations, network layers, and security models.

To simplify this architecture, Kafka is moving to an integrated model known as KRaft (Kafka Raft Metadata mode). In this new approach, the internal quorum controller replaces ZooKeeper by consolidating all metadata responsibilities (such as tracking partition locations and leadership roles) within Kafka itself. This controller uses an event-driven consensus protocol—similar to Raft and ZooKeeper’s ZAB protocol—to replicate metadata reliably across the cluster. By storing its state in an event-sourced log that is periodically snapshotted, the system can quickly recover from node failures with minimal downtime.

The benefits of this change are significant. For one, controlled shutdown and recovery times have been drastically reduced (from 135 to 32 seconds for shutdown and from 503 to 37 seconds for recovery in tests with 2 million partitions). Additionally, this streamlined architecture removes the overhead of managing a separate ZooKeeper cluster, allowing Kafka to run as a single process. This not only makes Kafka lighter and more accessible for small-scale or edge deployments but also supports massive scaling—enabling clusters to handle millions of partitions.

It’s important to note that KRaft is currently in early access (experimental mode) in the upcoming Apache Kafka 2.8 release. Some features such as ACLs, transactions, partition reassignment, and JBOD support are not yet implemented, so it isn’t recommended for production environments at this time.

In summary, Kafka’s shift to an integrated, event-driven quorum controller through KRaft aims to simplify deployment, improve performance and scalability, and reduce the operational complexity associated with managing a separate ZooKeeper system.